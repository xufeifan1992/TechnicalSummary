package com.xuff;

import org.junit.Test;

/**
 * Created by xufei
 * 2019/3/31
 * <p>
 * 排序算法与复杂度
 * 交换排序：冒泡排序(稳定) 最好时间 O(n) 平均时间O(n²) 最坏时间O(n²) 空间复杂度O(1)
 * 快速排序(不稳定) 最好时间 O(nlogn) 平均时间O(nlogn) 最坏时间O(n²) 空间复杂度O(logn)
 * 插入排序：插入排序(稳定) 最好时间 O(n) 平均时间O(n²) 最坏时间O(n²) 空间复杂度O(1)
 * 希尔排序(不稳定) 最好时间 O(n) 平均时间O(nlogn) 最坏时间O(n²) 空间复杂度O(1)
 * 选择排序：简单选择排序(不稳定) 最好时间 O(n²) 平均时间O(n²1) 最坏时间O(n²) 空间复杂度O(1)
 * 堆排序(不稳定) 最好时间 O(nlogn) 平均时间O(nlogn) 最坏时间O(nlogn) 空间复杂度O(1)
 * 归并排序(稳定) 最好时间 O(nlogn) 平均时间O(nlogn) 最坏时间O(nlogn) 空间复杂度O(n)
 */
public class DataStructureAndAlgorithm {

    /**
     * 冒泡排序
     * 原理：比较两个相邻的元素，将值大的元素交换至右端
     * 思路：依次比较相邻的两个数,将小数放在左边，大数放在右边，首先比较第一个和第二个数，将小数放在左边
     * 大数放在右边，然后比较第二个和第三个数，将小数放前，大数放后，如此继续，直至排序完成
     *
     * 第一趟排序：
     *        第一次排序：6与3比较 6大于3 换位置 3 6 8 2 9 1
     *        第二次排序：6与8比较 不换位置 3 6 8 2 9 1
     *        第三次排序：8与2比较 换位置 3 6 2 8 9 1
     *        第四次排序：8与9比较 不换位置 3 6 2 8 9 1
     *        第五次排序：9与1比较 换位置 3 6 2 8 1 9
     *
     * 第二趟排序:
     *        第一次排序：3与6比较 不换位置 3 6 2 8 1 9
     *        第二次排序：6与2比较 换位置 3 2 6 8 1 9
     *        第三次排序：6与8比较 不换位置 3 2 6 8 1 9
     *        第四次排序：8与1比较 换位置 3 2 6 1 8 9
     *
     * 第三趟排序:
     *        第一次排序：3与2比较 换位置 2 3 6 1 8 9
     *        第二次排序：3与6比较 不换位置 2 3 6 1 8 9
     *        第三次排序：6与1比较 换位置 2 3 1 6 8 9
     *
     * 第四趟排序:
     *        第一次排序：2与3比较 不换位置 2 3 1 6 8 9
     *        第二次排序：3与1比较 换位置 2 1 3 6 8 9
     *
     * 第五趟排序:
     *        第一次排序：2与1比较 换位置 1 2 3 6 8 9
     *
     */
    @Test
    public void sortBubble() {
        int[] arr = {6, 3, 8, 2, 9, 1};
        System.out.println("排序前数组为：");
        for (int i : arr) {
            System.out.print(i + " ");
        }
        int temp;
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }

        }
        System.out.println();
        System.out.println("排序后的数组为：");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
